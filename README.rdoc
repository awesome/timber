http://docs.scholastica.s3.amazonaws.com/timber.png

Timber helps you create flexible, unobtrusive activity logs using rails notifications. Timber is best for making the type of logs you normally see on an administrative dashboard:

  Sally drafted "A snowy night in the woods" (about 2 hours ago)
  Jim edited "A snowy night in the woods" (about 6 hours ago)
  Frank published "Autumnal Bliss" (2 days ago)
  Andy... and so on

== Installation
Include the gem to your +Gemfile+:
  gem 'timber'

Install and run the necessary migrations:
  rake timber_engine:install:migrations
  rake db:migrate

== Usage
Let's say your application has authors, posts, and publishers:

  class Author < ActiveRecord::Base
    belongs_to :publisher
    has_many :posts
  end

  class Post < ActiveRecord::Base
    belongs_to :publisher
    belongs_to :author
  end

  class Publisher < ActiveRecord::Base
    has_many :posts
    has_many :authors
  end

And you want to create a log item whenever a post is created or updated.

First, you need to set up an initializer at +config/initializers/timber.rb+.

  Timber.registration do
    subscribe "posts#create" do |event|
      post = Post.find_by_title(event.params[:post][:title])
      Timber::Activity.create(
        trackable: post,
        owner: post.publisher,
        key: "timber.posts.create",
        parameters: { author_name: post.author.name }
      )
    end
  end


Inside the +Timber.registration+ block, you can +subscribe+ to as many <tt>controller#action</tt> events as you like. In order to create an activity record, however, each subscription should include a call to <tt>Timber::Activity.create</tt>:

  Timber::Activity.create(
    # The object being acted on (i.e. created, updated, etc.). Polymorphic association.
    trackable: post,

    # The owner (i.e. often the person doing the work). Polymorphic association.
    owner: post.publisher,

    # The key string used to lookup the text template in +timber.en.yml+
    key: "timber.posts.create",

    # A serialized hash of arbitrary data. This is a good place to stuff miscellaneous
    # data in order to cut down on database queries when rendering the activity +text+.
    # But keep in mind that ActiveRecord doesn't make it easy to query serialized data
    # (see: http://stackoverflow.com/questions/9814622).
    parameters: { author_name: post.author.name }
  )


Next, create a yaml file to specify your templates in +config/locales/timber.en.yml+. Within this file, you have access to the activity instance, allowing your messages to mix static and dynamic content:

  timber:
    posts:
      create: "<%= owner.name %> created a post titled <%= trackable.title %>"
      update: "<%= owner.name %> edited <%= trackable.title %>: <%= parameters[:editorial_comment] %>"


Then you'll need to somehow fetch a collection of activities. Timber deliberately adds no magical methods to you models: you'll need to write them yourself. An +activities+ association, for example, might look like:

  has_many :activities, foreign_key: :owner_id, class_name: 'Timber::Activity'


Finally, you need to display the activities in your view:

  <ul>
    <% @publisher.activities.each do |activity| %>
      <li>
        <%= activity.text %>
        (<%= time_ago_in_words(activity.created_at) %> ago)
      </li>
    <% end %>
  </ul>


== Testing your activities
Testing activities is sorta tricky since it crosses the entire stack. Integration tests, however, are not a good option since a large application may subscribe to hundreds of activities. In most cases then, writing an integration test for each activity is just not feasible.

Instead, I suggest you devise a way to unit test your subscriptions. To make things a bit easier, you can include <tt>Timber::NotificationHelpers</tt> in your <tt>RSpec.configure</tt> block:

  # Include +publish_notification+ method for unit testing Timber activities
  config.include Timber::NotificationHelpers

This module provides a +publish_notification+ method which allows you to publish a notification â€“ specifying a controller, action, current_user and request params. You can find {example usage in the test suite}[https://github.com/scholastica/timber/blob/master/spec/timber/timber_spec.rb].


== Contributing
Fork the project, make your changes, and submit a pull request. Please ensure the tests pass:

  rspec .

This gem is a based on {public_activity}[https://github.com/pokonski/public_activity]. Thanks to {@pokonski}[https://github.com/pokonski] for his good ideas, especially the use of i18n for generating the activity text.

== TODO
* Currently, timber expects your current user method to be +current_user+. This should be configurable.
* When editing an object, it would be really nice if the +event+ contained information about what changed (e.g. <i>Jim update the post title from "Snowy Night" to "Snowing Evening"</i>).
* Support for HAML style interpolation within +timber.en.yml+ in addition to plain old ERB.

== License
Timber is an open source project built by {Scholastica, LLC}[https://scholasticahq.com]

http://docs.scholastica.s3.amazonaws.com/scholastica_footer_logo.png

<i>This project uses {MIT-LICENSE}[https://github.com/scholastica/timber/blob/master/MIT-LICENSE].</i>
